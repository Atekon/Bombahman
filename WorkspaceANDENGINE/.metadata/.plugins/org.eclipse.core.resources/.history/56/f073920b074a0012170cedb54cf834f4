package pt.cagojati.bombahman.multiplayer;

import java.io.IOException;

import org.andengine.extension.multiplayer.protocol.adt.message.IMessage;
import org.andengine.extension.multiplayer.protocol.server.Server;
import org.andengine.extension.multiplayer.protocol.server.SocketServer;
import org.andengine.extension.multiplayer.protocol.server.connector.SocketConnectionClientConnector;
import org.andengine.extension.multiplayer.protocol.shared.SocketConnection;
import org.andengine.extension.multiplayer.protocol.util.MessagePool;

import pt.cagojati.bombahman.multiplayer.messages.MessageFlags;

public class WiFiServer implements IMultiplayerServer {
	
	MessagePool<IMessage> mMessagePool = new MessagePool<IMessage>();
	private SocketServer<SocketConnectionClientConnector> mSocketServer;

	public WiFiServer() {
		MessageFlags.initMessagePool(mMessagePool);
	}

	@SuppressWarnings("rawtypes")
	@Override
	public Server getServerSocket() {
		return mSocketServer;
	}

	@Override
	public void initServer() {
		// TODO Auto-generated method stub
		this.mSocketServer = new SocketServer<SocketConnectionClientConnector>(SERVER_PORT, new ExampleClientConnectorListener(), new ExampleServerStateListener()) {
			@Override
			protected SocketConnectionClientConnector newClientConnector(final SocketConnection pSocketConnection) throws IOException {
				final SocketConnectionClientConnector clientConnector = new SocketConnectionClientConnector(pSocketConnection);
				
				clientConnector.registerClientMessage(FLAG_MESSAGE_CLIENT_ADD_FACE, AddFaceClientMessage.class, new IClientMessageHandler<SocketConnection>() {
					@Override
					public void onHandleMessage(final ClientConnector<SocketConnection> pClientConnector, final IClientMessage pClientMessage) throws IOException {
						final AddFaceClientMessage addFaceClientMessage = (AddFaceClientMessage) pClientMessage;
						
						final AddFaceServerMessage addFaceServerMessage = (AddFaceServerMessage) MultiplayerExample.this.mMessagePool.obtainMessage(FLAG_MESSAGE_SERVER_ADD_FACE);
						addFaceServerMessage.set(MultiplayerExample.this.mFaceIDCounter++, addFaceClientMessage.mX, addFaceClientMessage.mY);

						MultiplayerExample.this.mSocketServer.sendBroadcastServerMessage(addFaceServerMessage);

						MultiplayerExample.this.mMessagePool.recycleMessage(addFaceServerMessage);
					}
				});
				
				clientConnector.registerClientMessage(FLAG_MESSAGE_CLIENT_MOVE_FACE, MoveFaceClientMessage.class, new IClientMessageHandler<SocketConnection>() {
					@Override
					public void onHandleMessage(final ClientConnector<SocketConnection> pClientConnector, final IClientMessage pClientMessage) throws IOException {
						final MoveFaceClientMessage moveFaceClientMessage = (MoveFaceClientMessage) pClientMessage;
						
						final Integer faceID = moveFaceClientMessage.mID;

						final MoveFaceServerMessage moveFaceServerMessage = (MoveFaceServerMessage) MultiplayerExample.this.mMessagePool.obtainMessage(FLAG_MESSAGE_SERVER_MOVE_FACE);
						moveFaceServerMessage.set(faceID, moveFaceClientMessage.mX, moveFaceClientMessage.mY);

						MultiplayerExample.this.mSocketServer.sendBroadcastServerMessage(moveFaceServerMessage);

						MultiplayerExample.this.mMessagePool.recycleMessage(moveFaceServerMessage);
					}
				});

				return clientConnector;
			}
		};
		this.mSocketServer.start();
	}
	
	
}
